// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  roles         String[]  @default(["user"])
  isActive      Boolean   @default(true)
  accounts      Account[]
  sessions      Session[]

  reservas      Reserva[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Plan {
  id          Int       @id
  nombre_plan String
  image       String
  descripcion String? // Add description if available
  precio      Float? // Add price if relevant
  reservas    Reserva[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Remove User relation - plans shouldn't belong to users
  // They are independent entities from your API

  @@map("planes")
}

model Reserva {
  id        String   @id @default(uuid())
  planId    Int
  fecha     DateTime @default(now())
  estado    String   @default("pendiente")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plan Plan @relation(fields: [planId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planId])
  @@map("reservas")
}
